Linux安装redis
1、下载
wget: http://download.redis.io/releases/redis-6.2.1.tar.gz
解压 redis-3.2.9.tar到usr/local目录
编译 Redis 文件,Redis是使用c语言编写的会使用 gcc 编译器.
注意事项:
● make 命令执行过程中可能报错,根据控制台输出的错误信息进行解决
● 错误一:gcc命令找不到,是由于没有安装gcc导致解决方式:安装 gcc 编译器后在执行 make 命令
什么是 gcc ?
gcc是GNU compiler collection 的缩写,它是Linux下一个编译器集合(相当于javac),是c或 c++程序的编译器
怎么安装gcc ?
使用yum进行安装gcc.执行命令:yum -y install gcc
注意:
安装完 gcc 之后,在redis-6.2.1目录下再次执行 make(只是编译好)
继续执行:make install 安装目录:/usr/local/bin
查看默认安装目录
redis-benchmark:性能测试工具,可以在自己本子运行,看看自己本子性能如何
redis-check-aof:修复有问题的AOF文件
redis-check-dump:修复有问题的dump.rdb文件
redis-sentinel:Redis集群使用
redis-server:Redis服务器启动命令
redis-cli:客户端,操作入口

进入redis-6.2.1目录复制redis.conf文件到 /etc/redis.conf
cp redis-conf /etc/redis.conf
后台启动设置daemonize no 改成yes

Linux启动Redis
启动方式:
1、前台启动:
切换到/usr/local/bin目录,执行redis-server
或者
切换到/opt/redis-6.2.1/src目录,执行./redis-server
2、后台启动:
切换到/usr/local/bin目录,执行redis-server &
或者切换到/opt/redis-6.2.1/src目录,执行./redis-server
查看redis启动的进程
ps -ef|grep redis

关闭redis
1、使用客户端关闭,向服务器发出关闭命令
切换到/usr/local/bin目录,执行redis-cli shutdown
或者切换到/opt/redis-6.2.1/src目录,执行./redis-cli shutdown
推荐使用这种方式,redis先完成数据操作,然后再关闭
2、kill pid或者kill -9 pid
这种不会考虑当前应用是否有数据正在执行操作,直接就关闭应用先使用 ps -ef |grep redis 查出进程号,再使用kill pid

Redis客户端
一、redis命令行客户端
redis-cli是redis自带的基于命令行的redis客户端,用于与服务端交互,我们可以使用该客户端来执行redis的各种命令,两种常用的连接方式:
1、直接连接redis(默认ip 127.0.0.1,端口6379):./redis-cli
在redis安装目录\src,执行./redis-cli
此命令是连接本机127.0.0.1,端口号6379
2、指定IP和端口连接redis:redis-cli -h 127.0.0.1 -p 6379
-h redis 主机 IP(可以指定任意的redis服务器)
-p 端口号(不同的端口表示不同的redis应用)

二、redis远程客户端
使用客户端连接Linux的Redis
连接Linux的Redis之前需要修改Redis服务器的配置信息.Redis服务器有安全保护措施
默认只有本机(安装redis的那台机器)能够访问.配置信息存放在Redis安装目录下的redis.conf文件
1、bind ip绑定ip此行注释
2、protected-mode yes 保护模式改为no
使用vim 命令修改redis.conf文件,修改文件前备份此文件,执行cp命令
cp redis.conf bak_redis.conf
执行vim redis.conf

使用redis.conf启动redis
修改配置文件后,需要使用配置文件重新启动redis,默认不加载配置文件,先关闭已经启动的redis
使用一下命令启动redis在redis安装目录执行:
redis-server  ../redis.conf &
关闭redis
./redis-cli -a 密码 shutdown

redis相关知识
redis是单线程+多路IO复用技术
多路复用是指使用一个"线程"来检查"多个文件描述符"(socket)的就绪状态,比如调用
select和poll函数,传入多个文件描述符,如果有一个文件描述符就绪,则返回,否则
阻塞知道超时,得到就绪状态后进行真正的操作可以在同一个线程里执行,也可以启动线程执行(比如使用线程池)

String列表
reids键(key)
keys*查看当前库所有key(匹配:keys*1)
exists key 判断某个key是否存在
type key 查看你的key是什么类型
del key 删除指定的key数据
unlink key 根据value选择非阻塞删除
仅将keys 从keyspace元数据中删除,真正的删除会在后续异步操作
expire key 10 10秒钟:为给定的key设置过期时间
ttl key查看还有多少秒过期,-1表示永不过期,-2表示已过期

select 命令切换数据库
dbsize 查看当前数据的key的数量
flushdb 清空当前库
flushall 通杀全部库

set <key>
get <key> 查询对应键值
append <key> <value> 将给定的<value>追加到原值的末尾
strlen <key> 获得值的长度
setnx  <key> <value> 只有在key不存在时 设置key的值
incr <key> 将key中储存的数字值增1,只能对数字值操作,如果为空,新增值为1
decr <key> 将key中储存的数值值减1,只能对数字值操作,如果为空,新增值为-1
incrby/decrby   <key><步长>将key中储存的数字值增减,自定义步长
mset <key1> <value1> <key2> <value2>.... 同时设置一个或者多个key-value对
mget <key1> <key2>.... 同时获取一个或者多个value
msetnx <key1> <value1> <key2> <value2>....同时设置一个或者多个key-value,当且仅当所有给定key都不存在
getrange <key><起始位置><结束位置>获得值的范围,类似Java中的substring,前包,后包
setrang <key><起始位置><value>用<value> 覆写<key>所储存的字符串值,从<起始位置>开始(索引从0开始)
setex <key><过期时间><value> 设置键值的同时,设置过期时间,单位秒
getset <key> <value> 以新换旧,设置了新值同时获得旧值

List列表
lpush/rpush <key><value1><value2><value3>.... 从左边/右边插入一个或多个值
lpop/rpop   <key>从左边/右边吐出一个值.值在键在,值消键消
rpoplpush <key1><key2>从<key1>列表右边吐出一个值,插到<key2>列表左边
lrange <key><start><stop> 按照索引下标获得元素(从左到右)
lindex <key><index>按照索引下标获得元素(从左到右)
llen <key>获得列表长度
linsert <key> before <value><newvalue>在<value>的后面插入<newvalue>插入值
lrem <key><n><value>从左边删除n个value(从左右)
lset<key><index><value>将列表key下标为index的值替换成value


Set列表
redis的set是string类型的无序集合,它底层其实是一个value为null的hash表,所以添加,删除,查找的复杂度都是O(1)
一个算法,随着数据的增加,执行时间的长短,如果是O(1),数据增加,查找数据的时间不变
sadd <key><value1><value2>........将一个或多个member元素加入到集合key中,已经存在的member元素将被忽略
smembers <key>取出该集合的所有值
sismember <key><value>判断集合<key>是否为含有该<value>值,有1,没有0
scard<key>返回该集合的元素个数
srem<key><value1><value2>.....删除集合中的某个元素
spop<key>随机从该集合中吐出一个值
srandmember<key><n>随机从该集合中取出n个值,不会从集合中删除
smove<source><destination> value把集合中一个值从一个集合移动到另一个集合
sinter<key1><key2>返回两个集合的交集元素
sunion<key1><key2>返回两个集合的并集元素
sdiff<key1><key2>返回两个集合的差集元素

hash类型
hset <key><field><value>给<key>集合中的 <field>键赋值<value>
hget <key1><field>从<key1>集合<field>取出 value
hmset <key1><field><value1><field2><value2>....批量设置hash的值
hexists <key1><field>查看哈希表 key中,给定域<field>是否存在
hkeys <key>列出该hash集合的所有field
hvals <key>列出该hash集合的所有value
hincrby <key><field><increment>为哈希表key中的域field的值加上增量1
hsetnx <key><field><value>将哈希表key中的域field的值设置为value,当且仅当域filed不存在

Zset类型
zadd <key><score1><value1><score2><value2>将一个或多个member元素及其score值加入到有序集key当中
zrange <key><start><stop> [WITHSCRORES]返回有序集key中
下标在<start><stop>之间的元素带WITHSCORES,可以让分数一起和值返回到结果集
zrangebyscore key min max [withscores][limit offset count]返回有序集key中
所有score值介于min和max之间(包括等于min或max)的成员,有序集成员按score值递增(从小到大)次序排列
zrevrangebyscore key max min [withscores] [limit offset count]同上,改为从大到小
zincrby <key><increment><value> 为元素的score加上增量
zrem <key><value>删除该集合下,指定值的元素
zcount <key><min><max>统计该集合下,指定值的元素
zrank <key><value>返回该值在集合中的排名,从0开始

redis配置文件
一、Units单位
配置大小单位,开头定义了一些基本的度量单位,只支持bytes,不支持bit大小写不敏感

二、网络配置相关信息
默认情况下bind=127.0.0.1只能接受本机的访问请求,不写的情况下,无限制接受任何ip地址的访问

如果开启了protected-mode,那么在没有设定bind ip且没有设密码的情况下,redis只允许接受本机的响应
将本机访问保护模式设置为no

tcp-backlog
设置tcp的backlog,backlog其实是一个连接队列,backlog队列总和=未完成三次握手队列+已经完成三次握手队列
在高并发环境下你需要一个高backlog值来避免慢客户端连接问题

timeout
一个空闲的客户端维持多少秒会关闭,0表示关闭该功能,即永不关闭

tcp-keepalive
对访问客户端的一种心跳检测,每隔n秒检测一次
单位为秒,如果设置为0,则不会进行keepalive检测,建议设置成60

daemonize
是否为后台进程,设置为yes,守护进程,后台启动

pidfile
存放pid文件的位置,每个实例会产生一个不同的pid文件

loglevel
指定日志记录级别,redis总共支持四个级别:debug、verbose、notice、warning,默认为notice

databases 16
设定库的数量 默认16,默认数据库为0,可以使用select<dbid>命令在连接上指定的数据库id

SECURITY安全
设置密码
访问密码的查看、设置和取消
在命令中设置密码,只是临时的,重启redis服务器,密码就还原了
永久设置,需要再配置文件中进行设置
找到redis.conf文件,vim /opt/redis.conf
然后搜索/requirepass
在#requirepass foobared 下一行添加
requirepass 密码

limit限制
maxclients
设置redis同时可以与多少个客户端进行连接
默认情况下为10000个客户端
如果达到了此限制,redis则会拒绝新的连接请求,并且向这些连接请求方发出 "max number of clients reached"以作回应

redis的发布和订阅
redis发布订阅(pus/sub)是一种消息通信模式:发送者(pub)发送消息,订阅者(sub)接收消息
redis客户端可以订阅任意数量的频道
1、打开客户端订阅channel1: subscribe channel1
2、打开另一个客户端,给channel1发布消息hello: publish channel1 hello 返回的1是订阅者数量

redis6新数据类型
1、bitmaps本身不是一种数据类型,实际上它就是字符串(key-value),但是它可以对字符串的位进行操作
2、bitmaps单独提供了一套命令,所以在redis中使用bitmaps和使用字符串的方法不太相同
   可以把bitmaps想象成一个以单位的数组,数组的每个单元只能存储0和1,数组的下标在bitmaps中叫做偏移量

格式
setbit <key> <offset> <value>设置bitmaps中某个偏移量的值(0或1)
offset:偏移量从0开始
getbit <key> <offset> 获取bitmaps中某个偏移量的值
bitcount <key> [start end]统计字符串
bitop and(or/not/xor) <destkey> [key....]
bitophi一个复合操作,它可以做多个bitmaps的and(交集)、or(并集)、not(非)、xor(异或)操作并将结果保存在destkey中

HyperLogLog
pfadd
格式
pfadd <key> <element> [element....]添加指定元素到HyperLogLog中
pfcount <key>[key.....]计算HLL的近似基数,可以计算多个HLL,比如用HLL存储每天的UV,计算一周的UV可以使用7天的UV合并计算即可
pfmerge <destkey><sourcekey> [sourcekey....] 将一个或多个HLL合并后的结果存储在另一个HLL中
比如每月活跃用户可以使用每天的活跃用户合并计算可得

Geospatial
geoadd <key>< longitude><latitude><member>   添加地理位置（经度,纬度,名称）
两极无法直接添加,一般会下载城市数据,直接通过 Java 程序一次性导入。
有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度
geopos  <key><member> [member...]  获得指定地区的坐标值
geodist <key><member1><member2> [m|km|ft|mi]获取两个位置之间的直线距离
georadius<key>< longitude><latitude>radius  m|km|ft|mi   以给定的经纬度为中心,找出某一半径内的元素

Jedis操作redis6
模拟验证码发送
1、输入手机号,点击发送后随机生成6位数字码,2分钟有效
**生成随机6位数字验证码 Random
**验证码在2分钟内有效把验证码放到redis里面,设置过期时间120秒
2、输入验证码,点击验证,返回成功或失败
**从redis获取验证码和输入的验证码进行比较
3、每个手机号每天只能输入3次
4、每个手机每天只能发送3次验证码
**incr每次发送之后+1,大于2时候,提交不能发送

Jedis所需要的jar包
<dependency>
<groupId>redis.clients</groupId>
<artifactId>jedis</artifactId>
<version>3.2.0</version>
</dependency>

禁用Linux的防火墙:Linux(CentOS7)里执行命令
systemctl stop/disable firewalld.service
redis.conf中注释掉bind 127.0.0.1 ,然后 protected-mode no

Redis事物锁机制秒杀
Redis的事务定义
redis事务是一个单独的隔离操作,事务中所有命令都会序列化、按顺序地进行
事务在执行的过程中,不会被其他客户端发送来的命令请求所打断

redis事务的主要作用就是串联多个命令防止别的命令插队
悲观锁,顾名思义,就是很悲观,每次去拿数据的时候都认为别人会修改,所以每次在拿数据的时候都会上锁
这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制
比如行锁,表锁等,读锁,写锁等,都是在操作之前先上锁

watch key
在执行multi之前,先执行watch key1[key2],可以监视一个(或多个)key
如果在事务执行之前这个(或这些)key被其他命令所改动,那么事务将被打断

Redis事务联网--秒杀并发模拟
使用工具ab模拟测试
联网:yum install httpd-tools
ab测试参数
-n 请求次数 -c并发数量 -p提交的参数 -t提交参数类型
ab -n 2000 -c 200 -p ~/postfile -T application/x-www-form-urlencoded http://192.168.43.25:8080/Seckill/doseckill

Redis提供了2个不同方式的持久化方式
RDB(Redis DataBase)是什么
在指定的时间间隔内将内存中的数据集快照写入磁盘,也就是行话讲的Snapshot快照
它恢复时是将快照文件直接读到内存

备份是如何执行的
Redis会单独创建(fork)一个子进程来进行持久化,会先将数据写入到 一个临时文件中
待持久化过程都结束了,再用这个临时文件替换上次持久化好的文件。
整个过程中,主进程是不进行任何IO操作的
这就确保了极高的性能 如果需要进行大规模数据的恢复,且对于数据恢复的完整性不是非常敏感
那RDB方式要比AOF方式更加的高效。
RDB的缺点是最后一次持久化后的数据可能丢失

Fork
Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据(变量、环境变量、程序计数器等)数值都和原进程一致,但是是一个全新的进程,并作为原进程的子进程
在Linux程序中,fork()会产生一个和父进程完全相同的子进程,但子进程在此后多会exec系统调用,出于效率考虑,Linux中引入了“写时复制技术”
一般情况父进程和子进程会共用同一段物理内存,只有进程空间的各段的内容要发生变化时,才会将父进程的内容复制一份给子进程

dump.rdb文件
在redis.conf中配置文件名称,默认为dump.rdb

配置位置
rdb文件的保存路径,也可以修改。默认为Redis启动时命令行所在的目录下
dir ./

命令save VS bgsave
save :save时只管保存,其它不管,全部阻塞。手动保存。不建议。
bgsave:Redis会在后台异步进行快照操作, 快照同时还可以响应客户端请求。
可以通过lastsave 命令获取最后一次成功执行快照的时间

rdb的备份
先通过config get dir  查询rdb文件的目录
将*.rdb的文件拷贝到别的地方
rdb的恢复
关闭Redis
先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb
启动Redis, 备份数据会直接加载

劣势
Fork的时候,内存中的数据被克隆了一份,大致"2倍"的膨胀性需要考虑
虽然Redis在fork时使用了写时拷贝技术,但是如果数据庞大时还是比较消耗性能。
在备份周期在一定间隔时间做一次备份,所以如果Redis意外down掉的话,就会丢失最后一次快照后的所有修改。


Redis持久化之AOF
AOF(Append Only File)
以日志的形式来记录每个写操作(增量保存),将Redis执行过的所有写指令记录下来(读操作不记录)
"只许追加"文件但"不可以改写文件",redis启动之初会读取该文件重新构建数据,换言之
redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作

AOF持久化流程
(1)客户端的请求写命令会被append追加到AOF缓冲区内;
(2)AOF缓冲区根据AOF持久化策略[always、everysec、no]将操作sync同步到磁盘的AOF文件中;
(3)AOF文件大小超过重写策略或手动重写时,会对AOF文件rewrite重写,压缩AOF文件容量;
(4)Redis服务重启时,会重新load加载AOF文件中的写操作达到数据恢复的目的;

AOF默认不开启
可以在redis.conf中配置文件名称,默认为 appendonly.aof
AOF文件的保存路径,同RDB的路径一致。

AOF和RDB同时开启,redis听谁的?
AOF和RDB同时开启,系统默认取AOF的数据（数据不会存在丢失）


AOF启动/修复/恢复
AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样,都是拷贝备份文件,需要恢复时再拷贝到Redis工作目录下,启动系统即加载。
正常恢复
修改默认的appendonly no,改为yes
将有数据的aof文件复制一份保存到对应目录(查看目录:config get dir)
恢复:重启redis然后重新加载

异常恢复
修改默认的appendonly no,改为yes
如遇到AOF文件损坏,切换到/opt/redis-6.2.1/src 路径下进行命令
redis-check-aof--fix appendonly.aof进行恢复
备份被写坏的AOF文件
恢复:重启redis,然后重新加载

AOF同步频率设置
appendfsync always
始终同步,每次Redis的写入都会立刻记入日志;性能较差但数据完整性比较好
appendfsync everysec
每秒同步,每秒记入日志一次,如果宕机,本秒的数据可能丢失。
appendfsync no
redis不主动进行同步,把同步时机交给操作系统。


Redis_主从复制
主机数据更新后根据配置和策略, 自动同步到备机的master/slaver机制,Master以写为主,Slave以读为主
读写分离,性能扩展
容灾快速恢复

怎么玩:主从复制
1、创建/myredis文件夹
2、复制redis.conf配置文件到文件夹中
3、配置-主两从,创建三个配置文件
redis6379.conf
redis6380.conf
redis6381.conf
4、在三个配置文件中写入内容
include /myredis/redis.conf
pidfile /var/run/redis_6379.pid
port 6379
dbfilename dump6379.rdb
在redis.conf文件下配置 masterauth <master-password>
5、启动redis三个服务
redis-server /myredis/redis63**.conf
启动客户端
redis-cli /myredis/ -p 63**(端口号)
查看当前主机运行情况
info replication

配从(库)不配主(库)
slaveof  <ip><port>
成为某个实例的从服务器
1、在6380和6381上执行: slaveof 127.0.0.1 6379
2、在主机上写,在从机上可以读取数据
在从机上写数据报错
3、主机挂掉,重启就行,一切如初
4、从机重启需重设：slaveof 127.0.0.1 6379
可以将配置增加到文件中。永久生效。

1、当从服务器连接上服务器之后,从服务器向主服务器发送进行数据同步消息
2、主服务器接到从服务器发送过来同步的消息,把主服务器数据进行持久化rdb文件
   把rdb文件发送从服务器,从服务器拿到rdb进行读取
3、每次主服务器进行写操作之后,和从服务器进行数据同步

反客为主
当一个master宕机后,后面的slave可以立刻升为master,其后面的slave不用做任何修改。
用 slaveof  no one  将从机变为主机

哨兵模式(sentinel)
反客为主的自动版,能够后台监控主机是否故障,如果故障了根据投票数自动将从库转换为主库
调整为一主二仆模式,6379带着6380、6381
自定义的/myredis目录下新建sentinel.conf文件,名字绝不能错

配置哨兵,填写内容
sentinel monitor mymaster 127.0.0.1 6379 1
sentinel auth-pass mymaster qq1802702683
其中mymaster为监控对象起的服务器名称, 1 为至少有多少个哨兵同意迁移的数量
启动哨兵
redis-sentinel sentinel.conf

当主机挂掉,从机选举中产生新的主机
(大概10秒左右可以看到哨兵窗口日志,切换了新的主机)
哪个从机会被选举为主机呢？根据优先级别：slave-priority
原主机重启后会变为从机。


Redis集群
容量不够,redis如何进行扩容？
并发写操作, redis如何分摊？
另外,主从模式,薪火相传模式,主机宕机,导致ip地址发生变化,应用程序中配置需要修改对应的主机地址、端口等信息。
之前通过代理主机来解决,但是redis3.0中提供了解决方案。就是无中心化集群配置。
什么是集群
Redis 集群实现了对Redis的水平扩容,即启动N个redis节点,将整个数据库分布存储在这N个节点中,每个节点存储总数据的1/N。
Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯, 集群也可以继续处理命令请求。

删除持久化数据
将rdb,aof文件都删除掉。
制作6个实例,6379,6380,6381,6389,6390,6391
配置基本信息
开启daemonize yes
Pid文件名字
指定端口
Log文件名字
Dump.rdb名字
Appendonly 关掉或者换名字

redis cluster配置修改
cluster-enabled yes    打开集群模式
cluster-config-file nodes-6379.conf  设定节点配置文件名
cluster-node-timeout 15000   设定节点失联时间,超过该时间（毫秒）,集群自动进行主从切换。

使用查找替换修改另外5个文件
:%s/6379/6380

将六个节点合成一个集群
组合之前,请确保所有redis实例启动后,nodes-xxxx.conf文件都生成正常。

启动集群并合体:
cd  /opt/redis-6.2.1/src
redis-cli --cluster create --cluster-replicas 1 192.168.181.134:6379 192.168.181.134:6380 192.168.181.134:6381 192.168.181.134:6389 192.168.181.134:6390 192.168.181.134:6391 -a qq1802702683

此处不要用127.0.0.1, 请用真实IP地址
--replicas 1 采用最简单的方式配置集群,一台主机,一台从机,正好三组。
通过 cluster nodes 命令查看集群信息
分配原则尽量保证每个主数据运行在不同的ip地址,每个从库和主库不在一个ip地址上
redis cluster 如何分配这六个节点?
一个集群至少要有三个主节点。
选项 --cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。
分配原则尽量保证每个主数据库运行在不同的IP地址,每个从库和主库不在一个IP地址上。

All 16384 slots covered.
一个 Redis集群包含16384个插槽(hash slot), 数据库中的每个键都属于这16384个插槽的其中一个.
集群使用公式 CRC16(key)%16384来计算键key属于哪个槽, 其中CRC16(key)语句用于计算键key的CRC16校验和 。
集群中的每个节点负责处理一部分插槽。 举个例子, 如果一个集群可以有主节点, 其中
节点 A 负责处理 0 号至 5460 号插槽。
节点 B 负责处理 5461 号至 10922 号插槽。
节点 C 负责处理 10923 号至 16383 号插槽。

在集群中录入值
在redis-cli每次录入、查询键值,redis都会计算出该key应该送往的插槽,如果不是该客户端对应服务器的插槽,redis会报错,并告知应前往的redis实例地址和端口。
redis-cli客户端提供了 –c 参数实现自动重定向。
如 redis-cli  -c -a qq180270283 –p 6379 登入后,再录入、查询键值对可以自动重定向。
不在一个slot下的键值,是不能使用mget,mset等多键操作。
可以通过{}来定义组的概念,从而使key中{}内相同内容的键值对放到一个slot中去。

查询集群中的值
CLUSTER GETKEYSINSLOT <slot><count> 返回 count 个 slot 槽中的键。
如果所有某一段插槽的主从节点都宕掉,redis服务是否还能继续?
如果某一段插槽的主从都挂掉,而cluster-require-full-coverage 为yes ,那么 ,整个集群都挂掉
如果某一段插槽的主从都挂掉,而cluster-require-full-coverage 为no ,那么,该插槽数据全都不能使用,也无法存储。
redis.conf中的参数  cluster-require-full-coverage

缓存穿透
问题描述
key对应的数据在数据源并不存在,每次针对此key的请求从缓存获取不到,请求都会压到数据源,从而可能压垮数据源.
比如用一个不存在的用户id获取用户信息,不论缓存还是数据库都没有,若黑客利用此漏洞进行攻击可能压垮数据库.

解决方案
一个一定不存在缓存及查询不到的数据,由于缓存是不命中时被动写的,并且出于容错考虑
如果从存储层查不到数据则不写入缓存,这将导致这个不存在的数据每次请求都要到存储层去查询,失去了缓存的意义。
解决方案:
(1)对空值缓存:如果一个查询返回的数据为空(不管是数据是否不存在)
   我们仍然把这个空结果(null)进行缓存,设置空结果的过期时间会很短,最长不超过五分钟
(2)设置可访问的名单(白名单):
   使用bitmaps类型定义一个可以访问的名单,名单id作为bitmaps的偏移量
   每次访问和bitmap里面的id进行比较,如果访问id不在bitmaps里面,进行拦截,不允许访问。
(3)采用布隆过滤器:(布隆过滤器(Bloom Filter)是1970年由布隆提出的。
   它实际上是一个很长的二进制向量(位图)和一系列随机映射函数(哈希函数)。
   布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法,缺点是有一定的误识别率和删除困难)
   将所有可能存在的数据哈希到一个足够大的bitmaps中,一个一定不存在的数据会被 这个bitmaps拦截掉,从而避免了对底层存储系统的查询压力。
(4)进行实时监控:当发现Redis的命中率开始急速降低,需要排查访问对象和访问的数据,和运维人员配合,可以设置黑名单限制服务


缓存击穿
问题描述
key对应的数据存在,但在redis中过期,此时若有大量并发请求过来,这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存
这个时候大并发的请求可能会瞬间把后端DB压垮。

解决方案
key可能会在某些时间点被超高并发地访问,是一种非常"热点"的数据。这个时候,需要考虑一个问题:缓存被"击穿"的问题。
解决问题:
(1)预先设置热门数据:在redis高峰访问之前,把一些热门数据提前存入到redis里面,加大这些热门数据key的时长
(2)实时调整：现场监控哪些数据热门,实时调整key的过期时长
(3)使用锁:
1、就是在缓存失效的时候（判断拿出来的值为空）,不是立即去load db。
2、先使用缓存工具的某些带成功操作返回值的操作(比如Redis的SETNX)去set一个mutex key
3、当操作返回成功时,再进行load db的操作,并回设缓存,最后删除mutex key
4、当操作返回失败,证明有线程在load db,当前线程睡眠一段时间再重试整个get缓存的方法。

分布式锁
1、使用setnx上锁,通过del释放锁
2、锁一直没有释放,设置key过期时间,自动释放
3、上锁后突然出现异常,无法设置过期时间了
   *上锁时候同时设置过期时间就可以了
   set key value nx ex outTime

重启，服务集群，通过网关压力测试：
ab -n 1000 -c 100 http://192.168.43.25:8080/redisTest/testLock




